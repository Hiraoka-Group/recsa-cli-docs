{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RECSA CLI Documentation","text":"<p>This is the documentation for the CLI features of the <code>recsa</code> Python package.</p>"},{"location":"#installation","title":"Installation","text":"<p>To get started with the <code>recsa</code> CLI, please refer to the Installation page.</p>"},{"location":"#usage","title":"Usage","text":"<p>For detailed usage instructions, please refer to the Usage page.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.12 or later</li> <li><code>pip</code> package manager</li> </ul>"},{"location":"installation/#installation-steps","title":"Installation Steps","text":"<p>To install the <code>recsa</code> CLI, you can use <code>pip</code>:</p> <pre><code>pip install recsa\n</code></pre> <p>This will install the <code>recsa</code> package and the <code>recsa</code> CLI.</p>"},{"location":"installation/#after-installation","title":"After Installation","text":"<p>After installing the <code>recsa</code> CLI, you can verify the installation by running the following command:</p> <pre><code>recsa --version\n</code></pre>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>To get started with the <code>recsa</code> CLI, you can refer to the Usage guide.</p>"},{"location":"usage/","title":"Commands","text":"<ul> <li>Assembly Enumeration</li> <li>Assembly Concatenation</li> </ul>"},{"location":"usage/assembly-enumeration/","title":"How to use","text":"<p>The <code>enumerate-assemblies</code> subcommand is used to enumerate assemblies.</p>"},{"location":"usage/assembly-enumeration/#syntax","title":"Syntax","text":"<pre><code>recsa enumerate-assemblies [OPTIONS] INPUT OUTPUT\n</code></pre>"},{"location":"usage/assembly-enumeration/#positional-arguments","title":"Positional Arguments","text":"<ol> <li><code>INPUT</code>: Relative path to the input file.</li> <li><code>OUTPUT</code>: Relative path to the output file.</li> </ol>"},{"location":"usage/assembly-enumeration/#options","title":"Options","text":"<p>Options with single hyphen (<code>-</code>) are aliases for the corresponding options with double hyphen (<code>--</code>), e.g., <code>-w</code> is an alias for <code>--wip-dir</code>. Either of them can be used.</p> Command Alias Description Example <code>--wip-dir</code> <code>-w</code> Directory to store intermediate files. <code>recsa enumerate-assemblies -w wip input.yaml output.yaml</code>, where <code>wip</code> is the directory to store intermediate files. <code>--start</code> <code>-s</code> Starting index for the reindexing of the assemblies. <code>recsa enumerate-assemblies -s 10 input.yaml output.yaml</code>, where the starting index in the output file is 10. <code>--overwrite</code> <code>-o</code> Overwrite output file if it exists. <code>recsa enumerate-assemblies -o input.yaml output.yaml</code> <code>--verbose</code> <code>-v</code> Print feedback messages to the console. <code>recsa enumerate-assemblies -v input.yaml output.yaml</code> <code>--help</code> Show this message and exit. <code>recsa enumerate-assemblies --help</code>"},{"location":"usage/assembly-enumeration/#example","title":"Example","text":"<p>Directory structure before running the command: <pre><code>/\n\u2514\u2500\u2500 input.yaml\n</code></pre></p> <p>Command: <pre><code>recsa enumerate-assemblies input.yaml output.yaml\n</code></pre></p> <p>Directory structure after running the command: <pre><code>/\n\u251c\u2500\u2500 input.yaml\n\u2514\u2500\u2500 output.yaml\n</code></pre></p> <p>Input and output files are as follows:</p> Input File input.yaml<pre><code>bonds: [1, 2, 3, 4, 5, 6, 7, 8]\nbond_adjacency:\n  1: [8, 2]\n  2: [1, 3]\n  3: [2, 4]\n  4: [3, 5]\n  5: [4, 6]\n  6: [5, 7]\n  7: [6, 8]\n  8: [7, 1]\nsym_ops:\n  C_4: [[1, 3, 5, 7], [2, 4, 6, 8]]\n  C_2: [[1, 5], [2, 6], [3, 7], [4, 8]]\n  C_4^3: [[1, 7, 5, 3], [2, 8, 6, 4]]\n  C_2x: [[1, 2], [3, 8], [4, 7], [5, 6]]\n  C_2y: [[1, 6], [2, 5], [3, 4], [7, 8]]\n  C_2(1): [[1, 4], [2, 3], [5, 8], [6, 7]]\n  C_2(2): [[1, 8], [2, 7], [3, 6], [4, 5]]\ncomponent_kinds:\n  L: !Component\n    binding_sites: [a, b]\n  M: !Component\n    binding_sites: [a, b]\n  X: !Component\n    binding_sites: [a]\ncomponents_and_their_kinds:\n  M1: M\n  M2: M\n  M3: M\n  M4: M\n  L1: L\n  L2: L\n  L3: L\n  L4: L\nbonds_and_their_binding_sites:\n  1: [M1.b, L1.a]\n  2: [L1.b, M2.a]\n  3: [M2.b, L2.a]\n  4: [L2.b, M3.a]\n  5: [M3.b, L3.a]\n  6: [L3.b, M4.a]\n  7: [M4.b, L4.a]\n  8: [L4.b, M1.a]\ncapping_config:\n  target_component_kind: M\n  capping_component_kind: X\n  capping_binding_site: a\n</code></pre> Output File output.yaml<pre><code>0: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [M1.a, X0.a]\n  comp_id_to_kind: {L1: L, M1: M, X0: X}\n1: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [M1.a, X0.a]\n  - [M2.b, X1.a]\n  comp_id_to_kind: {L1: L, M1: M, M2: M, X0: X, X1: X}\n2: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L4: L, M1: M}\n3: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [M1.a, X0.a]\n  comp_id_to_kind: {L1: L, L2: L, M1: M, M2: M, X0: X}\n4: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [M1.a, X0.a]\n  - [M3.b, X1.a]\n  comp_id_to_kind: {L1: L, L2: L, M1: M, M2: M, M3: M, X0: X, X1: X}\n5: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L2: L, L4: L, M1: M, M2: M}\n6: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [M1.a, X0.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, M1: M, M2: M, M3: M, X0: X}\n7: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L3.b, M4.a]\n  - [M1.a, X0.a]\n  - [M4.b, X1.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, M1: M, M2: M, M3: M, M4: M, X0: X, X1: X}\n8: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, L4: L, M1: M, M2: M, M3: M}\n9: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L3.b, M4.a]\n  - [L4.a, M4.b]\n  - [M1.a, X0.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, L4: L, M1: M, M2: M, M3: M, M4: M, X0: X}\n10: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L3.b, M4.a]\n  - [L4.a, M4.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, L4: L, M1: M, M2: M, M3: M, M4: M}\n</code></pre> <p>Note</p> <p>See Input File and Output File for more details.</p>"},{"location":"usage/assembly-enumeration/about-example.h/","title":"About example.h","text":"<p>Use M<sub>4</sub>L<sub>4</sub> assembly as an example, where M is a metal ion with two binding sites and L is a ditopic ligand with two binding sites.</p> <p></p> <p>Example IDs for the bonds, components, and binding sites</p>"},{"location":"usage/assembly-enumeration/input/","title":"Input File","text":""},{"location":"usage/assembly-enumeration/input/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Example</li> <li>Fields</li> </ul>"},{"location":"usage/assembly-enumeration/input/#example","title":"Example","text":"<p>Use M<sub>4</sub>L<sub>4</sub> assembly as an example, where M is a metal ion with two binding sites and L is a ditopic ligand with two binding sites.</p> <p></p> <p>Example IDs for the bonds, components, and binding sites</p> input.yaml<pre><code>bonds: [1, 2, 3, 4, 5, 6, 7, 8]\nbond_adjacency:\n  1: [8, 2]\n  2: [1, 3]\n  3: [2, 4]\n  4: [3, 5]\n  5: [4, 6]\n  6: [5, 7]\n  7: [6, 8]\n  8: [7, 1]\nsym_ops:\n  C_4: [[1, 3, 5, 7], [2, 4, 6, 8]]\n  C_2: [[1, 5], [2, 6], [3, 7], [4, 8]]\n  C_4^3: [[1, 7, 5, 3], [2, 8, 6, 4]]\n  C_2x: [[1, 2], [3, 8], [4, 7], [5, 6]]\n  C_2y: [[1, 6], [2, 5], [3, 4], [7, 8]]\n  C_2(1): [[1, 4], [2, 3], [5, 8], [6, 7]]\n  C_2(2): [[1, 8], [2, 7], [3, 6], [4, 5]]\ncomponent_kinds:\n  L: !Component\n    binding_sites: [a, b]\n  M: !Component\n    binding_sites: [a, b]\n  X: !Component\n    binding_sites: [a]\ncomponents_and_their_kinds:\n  M1: M\n  M2: M\n  M3: M\n  M4: M\n  L1: L\n  L2: L\n  L3: L\n  L4: L\nbonds_and_their_binding_sites:\n  1: [M1.b, L1.a]\n  2: [L1.b, M2.a]\n  3: [M2.b, L2.a]\n  4: [L2.b, M3.a]\n  5: [M3.b, L3.a]\n  6: [L3.b, M4.a]\n  7: [M4.b, L4.a]\n  8: [L4.b, M1.a]\ncapping_config:\n  target_component_kind: M\n  capping_component_kind: X\n  capping_binding_site: a\n</code></pre> <p>Download the example input file: input.yaml</p>"},{"location":"usage/assembly-enumeration/input/#fields","title":"Fields","text":""},{"location":"usage/assembly-enumeration/input/#bonds-field","title":"<code>bonds</code> field","text":"<pre><code>bonds: [1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre> <p>A list of bond IDs.</p> <ul> <li>IDs must be unique. (Incorrect: <code>[1, 1, 2]</code>)</li> <li>IDs can be either integers or strings. (Correct: <code>1</code>, <code>a</code>, <code>bond1</code>, <code>\"1\"</code>)</li> <li>ID type must be consistent. (Incorrect: <code>[1, \"a\"]</code>)</li> </ul>"},{"location":"usage/assembly-enumeration/input/#bond_adjacency-field","title":"<code>bond_adjacency</code> field","text":"<pre><code>bond_adjacency:\n  1: [8, 2]\n  2: [1, 3]\n  3: [2, 4]\n  4: [3, 5]\n  5: [4, 6]\n  6: [5, 7]\n  7: [6, 8]\n  8: [7, 1]\n</code></pre> <p>A dictionary where keys are bond IDs and values are lists of adjacent bond IDs.</p> <p>For example, <code>1: [8, 2]</code> means that bond 1 is adjacent to bonds 8 and 2.</p>"},{"location":"usage/assembly-enumeration/input/#sym_ops-field","title":"<code>sym_ops</code> field","text":"<pre><code>sym_ops:\n  C_4: [[1, 3, 5, 7], [2, 4, 6, 8]]\n  C_2: [[1, 5], [2, 6], [3, 7], [4, 8]]\n  C_4^3: [[1, 7, 5, 3], [2, 8, 6, 4]]\n  C_2x: [[1, 2], [3, 8], [4, 7], [5, 6]]\n  C_2y: [[1, 6], [2, 5], [3, 4], [7, 8]]\n  C_2(1): [[1, 4], [2, 3], [5, 8], [6, 7]]\n  C_2(2): [[1, 8], [2, 7], [3, 6], [4, 5]]\n</code></pre> <p>A dictionary where keys are symmetry operation names and values are symmetry operation definitions.</p> <p>Three types of definitions are supported:</p>"},{"location":"usage/assembly-enumeration/input/#1-permutation-of-bond-ids","title":"1. Permutation of bond IDs","text":"<p><pre><code>C_4: [[1, 3, 5, 7], [2, 4, 6, 8]]\n</code></pre> This means that the symmetry operation <code>C_4</code> maps 1 to 3, 3 to 5, 5 to 7, and 7 to 1. Similarly, 2 to 4, 4 to 6, 6 to 8, and 8 to 2.</p> <p>Note</p> <p>If there are bonds that do not move, represent them as a list containing only one element, like this:</p> <pre><code>sigma_x: [[1], [2, 3]]\n</code></pre> <p>This means that the symmetry operation <code>sigma_x</code> maps 1 to 1, 2 to 3, and 3 to 2, i.e., 1 remains at the same position.</p>"},{"location":"usage/assembly-enumeration/input/#2-mapping-of-bond-ids","title":"2. Mapping of bond IDs:","text":"<pre><code>C_4: {1: 3, 2: 4, 3: 5, 4: 6, 5: 7, 6: 8, 7: 1, 8: 2}\n</code></pre> <p>Symmetry operations can also be defined as a dictionary where keys are bond IDs and values are the bond IDs to which they are mapped.</p>"},{"location":"usage/assembly-enumeration/input/#3-composition-of-other-symmetry-operations","title":"3. Composition of other symmetry operations:","text":"<pre><code>C_2y: [C_2x, C_2]\n</code></pre> <p>Symmetry operations can be defined as a product of other symmetry operations. In this case, <code>C_2y</code> is defined as the composition of <code>C_2x</code> and <code>C_2</code>.</p> <p>Warning</p> <p>The order of the symmetry operations in the composition is important. The symmetry operation on the right is applied first. For example, <code>C_2y</code> is defined as <code>C_2</code> followed by <code>C_2x</code>.</p> <p>Note</p> <p>Composition of three or more symmetry operations is also supported. For example: <pre><code>C_4^3: [C_4, C_4, C_4]\n</code></pre></p>"},{"location":"usage/assembly-enumeration/input/#combination-of-representation-types","title":"Combination of representation types","text":"<p>The representation types can be mixed in the <code>sym_ops</code> field. For example: <pre><code>sym_ops:\n  C_4: [[1, 3, 5, 7], [2, 4, 6, 8]]  # Permutation\n  C_2: [C_4, C_4]  # Composition\n  C_4^3: {1: 7, 2: 8, 3: 1, 4: 2, 5: 3, 6: 4, 7: 5, 8: 6}  # Mapping\n  C_2x: [[1, 2], [3, 8], [4, 7], [5, 6]]\n  C_2y: [C_2x, C_2]\n  C_2(1): [C_4, C_2x]\n  C_2(2): [C_2x, C_4]\n</code></pre></p>"},{"location":"usage/assembly-enumeration/input/#component_kinds-field","title":"<code>component_kinds</code> field","text":"<pre><code>component_kinds:\n  L: !Component\n    binding_sites: [a, b]\n  M: !Component\n    binding_sites: [a, b]\n  X: !Component\n    binding_sites: [a]\n</code></pre> <p>A dictionary where keys are names of component kinds and values are component definitions.</p> <p>Note</p> <p>Component kinds can also have \"auxiliary edges\" defined. For example: <pre><code>component_kinds:\n  M: !Component\n    binding_sites: [a, b, c, d]\n    aux_edges: [[a, b, cis], [b, c, cis], [c, d, cis], [d, a, cis]]\n</code></pre> The auxiliary edges can be used to define the relative orientation of the binding sites in the component, which can be used to distinguish between different stereoisomers.</p>"},{"location":"usage/assembly-enumeration/input/#components_and_their_kinds-field","title":"<code>components_and_their_kinds</code> field","text":"<pre><code>components_and_their_kinds:\n  M1: M\n  M2: M\n  M3: M\n  M4: M\n  L1: L\n  L2: L\n  L3: L\n  L4: L\n</code></pre> <p>A dictionary where keys are component names and values are component kind names defined in the <code>component_kinds</code> field.</p>"},{"location":"usage/assembly-enumeration/input/#bonds_and_their_binding_sites-field","title":"<code>bonds_and_their_binding_sites</code> field","text":"<pre><code>bonds_and_their_binding_sites:\n  1: [M1.b, L1.a]\n  2: [L1.b, M2.a]\n  3: [M2.b, L2.a]\n  4: [L2.b, M3.a]\n  5: [M3.b, L3.a]\n  6: [L3.b, M4.a]\n  7: [M4.b, L4.a]\n  8: [L4.b, M1.a]\n</code></pre> <p>A dictionary where keys are bond IDs and values are lists of binding sites. For example, <code>1: [M1.b, L1.a]</code> means that bond 1 connects the binding site <code>b</code> of component <code>M1</code> to the binding site <code>a</code> of component <code>L1</code>. Here, <code>M1.b</code> refers to the binding site <code>b</code> of component <code>M1</code>.</p>"},{"location":"usage/assembly-enumeration/input/#capping_config-field","title":"<code>capping_config</code> field","text":"<pre><code>capping_config:\n  target_component_kind: M\n  capping_component_kind: X\n  capping_binding_site: a\n</code></pre> <p>A dictionary that defines the capping configuration.</p> <ul> <li><code>target_component_kind</code>: The component kind to be capped.</li> <li><code>capping_component_kind</code>: The component kind to be used for capping.</li> <li><code>capping_binding_site</code>: The binding site of the capping component to be connected to the target component.</li> </ul>"},{"location":"usage/assembly-enumeration/output/","title":"Output File","text":""},{"location":"usage/assembly-enumeration/output/#example","title":"Example","text":"<p>Use M<sub>4</sub>L<sub>4</sub> assembly as an example, where M is a metal ion with two binding sites and L is a ditopic ligand with two binding sites.</p> <p></p> <p>Example IDs for the bonds, components, and binding sites</p> output.yaml<pre><code>0: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [M1.a, X0.a]\n  comp_id_to_kind: {L1: L, M1: M, X0: X}\n1: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [M1.a, X0.a]\n  - [M2.b, X1.a]\n  comp_id_to_kind: {L1: L, M1: M, M2: M, X0: X, X1: X}\n2: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L4: L, M1: M}\n3: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [M1.a, X0.a]\n  comp_id_to_kind: {L1: L, L2: L, M1: M, M2: M, X0: X}\n4: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [M1.a, X0.a]\n  - [M3.b, X1.a]\n  comp_id_to_kind: {L1: L, L2: L, M1: M, M2: M, M3: M, X0: X, X1: X}\n5: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L2: L, L4: L, M1: M, M2: M}\n6: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [M1.a, X0.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, M1: M, M2: M, M3: M, X0: X}\n7: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L3.b, M4.a]\n  - [M1.a, X0.a]\n  - [M4.b, X1.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, M1: M, M2: M, M3: M, M4: M, X0: X, X1: X}\n8: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, L4: L, M1: M, M2: M, M3: M}\n9: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L3.b, M4.a]\n  - [L4.a, M4.b]\n  - [M1.a, X0.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, L4: L, M1: M, M2: M, M3: M, M4: M, X0: X}\n10: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L3.b, M4.a]\n  - [L4.a, M4.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, L4: L, M1: M, M2: M, M3: M, M4: M}\n</code></pre>"},{"location":"usage/assembly-enumeration/output/#explanation","title":"Explanation","text":"<pre><code>0: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [M1.a, X0.a]\n  comp_id_to_kind: {L1: L, M1: M, X0: X}\n</code></pre> <p>Each assembly is represented as a dictionary with the following fields:</p> <ul> <li><code>bonds</code>: A list of binding site pairs.</li> <li><code>comp_id_to_kind</code>: A dictionary where keys are component IDs and values are component kinds.</li> </ul> <p>In the example above, the assembly has three components, <code>L1</code>, <code>M1</code>, and <code>X0</code>, whose kinds are <code>L</code>, <code>M</code>, and <code>X</code>, respectively. The assembly has two bonds: one between the binding sites <code>a</code> of <code>L1</code> and <code>b</code> of <code>M1</code>, and another between the binding sites <code>a</code> of <code>M1</code> and <code>a</code> of <code>X0</code>.</p> <p></p> <p>Structure of the assembly-0, i.e., MLX</p>"},{"location":"usage/assembly-enumeration/wip-dir-option/","title":"<code>--wip-dir</code> Option","text":"<p>The <code>--wip-dir</code> option (alias <code>-w</code>) is used to specify the directory to store intermediate files. This option is useful for debugging and determining the cause of errors during the assembly enumeration process.</p>"},{"location":"usage/assembly-enumeration/wip-dir-option/#example","title":"Example","text":"<p>If you want to store intermediate files in a directory named <code>wip</code>, run the following command:</p> <pre><code>recsa enumerate-assemblies --wip-dir wip input.yaml output.yaml\n</code></pre> <p>After running the command, the directory structure will be as follows:</p> <pre><code>/\n\u251c\u2500\u2500 input.yaml\n\u251c\u2500\u2500 output.yaml\n\u2514\u2500\u2500 wip\n    \u251c\u2500\u2500 resolved_sym_ops.yaml\n    \u251c\u2500\u2500 wip1_bondsets.yaml\n    \u251c\u2500\u2500 wip2_assemblies.yaml\n    \u251c\u2500\u2500 wip3_unique_assemblies.yaml\n    \u2514\u2500\u2500 wip4_capped_assemblies.yaml\n</code></pre>"},{"location":"usage/assembly-enumeration/wip-dir-option/#files","title":"Files","text":""},{"location":"usage/assembly-enumeration/wip-dir-option/#resolved_sym_opsyaml-file","title":"<code>resolved_sym_ops.yaml</code> file","text":"<p>Contains resolved symmetry operations. All symmetry operations are represented as a mapping of the bond IDs. Use this file to check if the symmetry operations are resolved correctly.</p> resolved_sym_ops.yaml <pre><code>C_2: {1: 5, 2: 6, 3: 7, 4: 8, 5: 1, 6: 2, 7: 3, 8: 4}\nC_2(1): {1: 4, 2: 3, 3: 2, 4: 1, 5: 8, 6: 7, 7: 6, 8: 5}\nC_2(2): {1: 8, 2: 7, 3: 6, 4: 5, 5: 4, 6: 3, 7: 2, 8: 1}\nC_2x: {1: 2, 2: 1, 3: 8, 4: 7, 5: 6, 6: 5, 7: 4, 8: 3}\nC_2y: {1: 6, 2: 5, 3: 4, 4: 3, 5: 2, 6: 1, 7: 8, 8: 7}\nC_4: {1: 3, 2: 4, 3: 5, 4: 6, 5: 7, 6: 8, 7: 1, 8: 2}\nC_4^3: {1: 7, 2: 8, 3: 1, 4: 2, 5: 3, 6: 4, 7: 5, 8: 6}\n</code></pre> <code>sym_ops</code> field in the input file which is used to resolve the symmetry operations. <p>You can see all the symmetry operations in the <code>sym_ops</code> field of the input file (below) are resolved and represented as a mapping in the <code>resolved_sym_ops.yaml</code> file (above). <pre><code>sym_ops:\nC_4: [[1, 3, 5, 7], [2, 4, 6, 8]]\nC_2: [[1, 5], [2, 6], [3, 7], [4, 8]]\nC_4^3: [[1, 7, 5, 3], [2, 8, 6, 4]]\nC_2x: [[1, 2], [3, 8], [4, 7], [5, 6]]\nC_2y: [[1, 6], [2, 5], [3, 4], [7, 8]]\nC_2(1): [[1, 4], [2, 3], [5, 8], [6, 7]]\nC_2(2): [[1, 8], [2, 7], [3, 6], [4, 5]]\n</code></pre></p>"},{"location":"usage/assembly-enumeration/wip-dir-option/#wip1_bondsetsyaml-file","title":"<code>wip1_bondsets.yaml</code> file","text":"<p>Contains fragments of the given assembly represented as lists of bond IDs.</p> wip1_bondsets.yaml <pre><code>0: [1]\n1: [1, 2]\n2: [1, 8]\n3: [1, 2, 3]\n4: [1, 2, 3, 4]\n5: [1, 2, 3, 8]\n6: [1, 2, 3, 4, 5]\n7: [1, 2, 3, 4, 5, 6]\n8: [1, 2, 3, 4, 5, 8]\n9: [1, 2, 3, 4, 5, 6, 7]\n10: [1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre>"},{"location":"usage/assembly-enumeration/wip-dir-option/#wip2_assembliesyaml-file","title":"<code>wip2_assemblies.yaml</code> file","text":"<p>Contains assembly objects converted from the bond sets.</p> wip2_assemblies.yaml <pre><code>0: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  comp_id_to_kind: {L1: L, M1: M}\n1: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  comp_id_to_kind: {L1: L, M1: M, M2: M}\n2: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L4: L, M1: M}\n3: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  comp_id_to_kind: {L1: L, L2: L, M1: M, M2: M}\n4: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  comp_id_to_kind: {L1: L, L2: L, M1: M, M2: M, M3: M}\n5: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L2: L, L4: L, M1: M, M2: M}\n6: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, M1: M, M2: M, M3: M}\n7: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L3.b, M4.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, M1: M, M2: M, M3: M, M4: M}\n8: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, L4: L, M1: M, M2: M, M3: M}\n9: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L3.b, M4.a]\n  - [L4.a, M4.b]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, L4: L, M1: M, M2: M, M3: M, M4: M}\n10: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L3.b, M4.a]\n  - [L4.a, M4.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, L4: L, M1: M, M2: M, M3: M, M4: M}\n</code></pre>"},{"location":"usage/assembly-enumeration/wip-dir-option/#wip3_unique_assembliesyaml-file","title":"<code>wip3_unique_assemblies.yaml</code> file","text":"<p>Contains unique assemblies.</p> wip3_unique_assemblies.yaml <pre><code>0: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  comp_id_to_kind: {L1: L, M1: M}\n1: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  comp_id_to_kind: {L1: L, M1: M, M2: M}\n2: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L4: L, M1: M}\n3: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  comp_id_to_kind: {L1: L, L2: L, M1: M, M2: M}\n4: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  comp_id_to_kind: {L1: L, L2: L, M1: M, M2: M, M3: M}\n5: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L2: L, L4: L, M1: M, M2: M}\n6: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, M1: M, M2: M, M3: M}\n7: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L3.b, M4.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, M1: M, M2: M, M3: M, M4: M}\n8: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, L4: L, M1: M, M2: M, M3: M}\n9: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L3.b, M4.a]\n  - [L4.a, M4.b]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, L4: L, M1: M, M2: M, M3: M, M4: M}\n10: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L3.b, M4.a]\n  - [L4.a, M4.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, L4: L, M1: M, M2: M, M3: M, M4: M}\n</code></pre>"},{"location":"usage/assembly-enumeration/wip-dir-option/#wip4_capped_assembliesyaml-file","title":"<code>wip4_capped_assemblies.yaml</code> file","text":"<p>Contains capped assemblies.</p> wip4_capped_assemblies.yaml <pre><code>0: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [M1.a, X0.a]\n  comp_id_to_kind: {L1: L, M1: M, X0: X}\n1: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [M1.a, X0.a]\n  - [M2.b, X1.a]\n  comp_id_to_kind: {L1: L, M1: M, M2: M, X0: X, X1: X}\n2: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L4: L, M1: M}\n3: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [M1.a, X0.a]\n  comp_id_to_kind: {L1: L, L2: L, M1: M, M2: M, X0: X}\n4: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [M1.a, X0.a]\n  - [M3.b, X1.a]\n  comp_id_to_kind: {L1: L, L2: L, M1: M, M2: M, M3: M, X0: X, X1: X}\n5: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L2: L, L4: L, M1: M, M2: M}\n6: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [M1.a, X0.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, M1: M, M2: M, M3: M, X0: X}\n7: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L3.b, M4.a]\n  - [M1.a, X0.a]\n  - [M4.b, X1.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, M1: M, M2: M, M3: M, M4: M, X0: X, X1: X}\n8: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, L4: L, M1: M, M2: M, M3: M}\n9: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L3.b, M4.a]\n  - [L4.a, M4.b]\n  - [M1.a, X0.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, L4: L, M1: M, M2: M, M3: M, M4: M, X0: X}\n10: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L3.b, M4.a]\n  - [L4.a, M4.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, L4: L, M1: M, M2: M, M3: M, M4: M}\n</code></pre>"},{"location":"usage/assembly-list-concatenation/","title":"How to use","text":"<p>The <code>concat-assembly-lists</code> subcommand is used to concatenate assembly lists. The assemblies in the input files are concatenated and reindexed. </p> <p>The command will check for isomorphism between assemblies, and isomorphic assemblies will be merged (unless the <code>--skip-isomorphism-checks</code> option is used).</p>"},{"location":"usage/assembly-list-concatenation/#syntax","title":"Syntax","text":"<pre><code>recsa concat-assembly-lists [OPTIONS] [ASSEMBLIES]... COMPONENT_KINDS OUTPUT\n</code></pre>"},{"location":"usage/assembly-list-concatenation/#positional-arguments","title":"Positional Arguments","text":"<ol> <li><code>ASSEMBLIES</code>: Paths to input files of assemblies. Multiple paths can be provided.</li> <li><code>COMPONENT_KINDS</code>: Path to input file of component kinds.</li> <li><code>OUTPUT</code>: Path to output file.</li> </ol>"},{"location":"usage/assembly-list-concatenation/#options","title":"Options","text":"<ul> <li><code>--already-unique-within-files</code>, <code>-u</code>: Whether the assemblies in each file are already unique. If used, the isomorphism checks are skipped for the assemblies within each file.</li> <li><code>--skip-isomorphism-checks</code>, <code>-i</code>: Skip isomorphism checks for the assemblies. If used, the isomorphism checks are skipped for all assemblies. The resulting assembly list may contain isomorphic assemblies.</li> <li><code>--start</code>, <code>-s</code>: Starting index for the reindexing of the assemblies.</li> <li><code>--overwrite</code>, <code>-o</code>: Overwrite output file if it exists.</li> <li><code>--verbose</code>, <code>-v</code>: Print verbose output.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"usage/assembly-list-concatenation/#example","title":"Example","text":"<p>Directory structure before running the command: <pre><code>/\n\u251c\u2500\u2500 assemblies1.yaml\n\u251c\u2500\u2500 assemblies2.yaml\n\u2514\u2500\u2500 component_kinds.yaml\n</code></pre></p> <p>Command: <pre><code>recsa concat-assembly-lists assemblies1.yaml assemblies2.yaml component_kinds.yaml output.yaml\n</code></pre></p> <p>Directory structure after running the command: <pre><code>/\n\u251c\u2500\u2500 assemblies1.yaml\n\u251c\u2500\u2500 assemblies2.yaml\n\u251c\u2500\u2500 component_kinds.yaml\n\u2514\u2500\u2500 output.yaml\n</code></pre></p> <p>Input and output files are as follows:</p> Input File assemblies1.yaml<pre><code>0: !Assembly  # MX2\n  bonds:\n  - [X1.a, M1.a]\n  - [M1.b, X2.a]\n  comp_id_to_kind: {M1: M, X1: X, X2: X}\n1: !Assembly  # L\n  comp_id_to_kind: {L1: L}\n2: !Assembly  # X\n  comp_id_to_kind: {X1: X}\n</code></pre> Input File assemblies2.yaml<pre><code>0: !Assembly  # MLX\n  bonds:\n  - [L1.a, M1.b]\n  - [M1.a, X0.a]\n  comp_id_to_kind: {L1: L, M1: M, X0: X}\n1: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [M1.a, X0.a]\n  - [M2.b, X1.a]\n  comp_id_to_kind: {L1: L, M1: M, M2: M, X0: X, X1: X}\n2: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L4: L, M1: M}\n3: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [M1.a, X0.a]\n  comp_id_to_kind: {L1: L, L2: L, M1: M, M2: M, X0: X}\n4: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [M1.a, X0.a]\n  - [M3.b, X1.a]\n  comp_id_to_kind: {L1: L, L2: L, M1: M, M2: M, M3: M, X0: X, X1: X}\n5: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L2: L, L4: L, M1: M, M2: M}\n6: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [M1.a, X0.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, M1: M, M2: M, M3: M, X0: X}\n7: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L3.b, M4.a]\n  - [M1.a, X0.a]\n  - [M4.b, X1.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, M1: M, M2: M, M3: M, M4: M, X0: X, X1: X}\n8: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, L4: L, M1: M, M2: M, M3: M}\n9: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L3.b, M4.a]\n  - [L4.a, M4.b]\n  - [M1.a, X0.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, L4: L, M1: M, M2: M, M3: M, M4: M, X0: X}\n10: !Assembly  # M4L4 square\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L3.b, M4.a]\n  - [L4.a, M4.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, L4: L, M1: M, M2: M, M3: M, M4: M}\n</code></pre> Output File output.yaml<pre><code>0: !Assembly\n  bonds:\n  - [M1.a, X1.a]\n  - [M1.b, X2.a]\n  comp_id_to_kind: {M1: M, X1: X, X2: X}\n1: !Assembly\n  comp_id_to_kind: {L1: L}\n2: !Assembly\n  comp_id_to_kind: {X1: X}\n3: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [M1.a, X0.a]\n  comp_id_to_kind: {L1: L, M1: M, X0: X}\n4: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [M1.a, X0.a]\n  - [M2.b, X1.a]\n  comp_id_to_kind: {L1: L, M1: M, M2: M, X0: X, X1: X}\n5: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L4: L, M1: M}\n6: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [M1.a, X0.a]\n  comp_id_to_kind: {L1: L, L2: L, M1: M, M2: M, X0: X}\n7: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [M1.a, X0.a]\n  - [M3.b, X1.a]\n  comp_id_to_kind: {L1: L, L2: L, M1: M, M2: M, M3: M, X0: X, X1: X}\n8: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L2: L, L4: L, M1: M, M2: M}\n9: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [M1.a, X0.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, M1: M, M2: M, M3: M, X0: X}\n10: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L3.b, M4.a]\n  - [M1.a, X0.a]\n  - [M4.b, X1.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, M1: M, M2: M, M3: M, M4: M, X0: X, X1: X}\n11: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, L4: L, M1: M, M2: M, M3: M}\n12: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L3.b, M4.a]\n  - [L4.a, M4.b]\n  - [M1.a, X0.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, L4: L, M1: M, M2: M, M3: M, M4: M, X0: X}\n13: !Assembly\n  bonds:\n  - [L1.a, M1.b]\n  - [L1.b, M2.a]\n  - [L2.a, M2.b]\n  - [L2.b, M3.a]\n  - [L3.a, M3.b]\n  - [L3.b, M4.a]\n  - [L4.a, M4.b]\n  - [L4.b, M1.a]\n  comp_id_to_kind: {L1: L, L2: L, L3: L, L4: L, M1: M, M2: M, M3: M, M4: M}\n</code></pre>"}]}